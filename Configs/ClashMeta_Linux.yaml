# port: 7890 # HTTP(S) 代理服务器端口
# socks-port: 7891 # SOCKS5 代理端口
mixed-port: 7892 # HTTP(S) 和 SOCKS 代理混合端口
redir-port: 7893 # 透明代理端口，用于 Linux 和 MacOS

# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
tproxy-port: 7894

geodata-mode: true

unified-delay: true

tcp-concurrent: true         #【Meta专属】TCP连接并发，如果域名解析结果对应多个IP，并发所有IP，选择握手最快的IP进行连接

#  TCP keep alive interval
keep-alive-interval: 1800

allow-lan: true # 允许局域网连接
bind-address: "*" # 绑定 IP 地址，仅作用于 allow-lan 为 true，'*'表示所有地址

#  find-process-mode has 3 values:always, strict, off
#  - always, 开启，强制匹配所有进程
#  - strict, 默认，由 clash 判断是否开启
#  - off, 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict

mode: rule

#自定义 geodata url
geox-url:
  geoip: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.metadb"

log-level: error # 日志等级 silent/error/warning/info/debug

ipv6: true # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录

external-controller: 0.0.0.0:9090
external-ui: ./dashboard
secret: "admin"

# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
# 可选： "chrome","firefox","safari","ios","random","none" options.
# Utls is currently support TLS transport in TCP/grpc/WS/HTTP for VLESS/Vmess and trojan.
global-client-fingerprint: chrome
geodata-loader: standard # memconservative（小内存）

# iptables:
#   enable: false

profile:
  # 存储 select 选择记录
  store-selected: true
  # 持久化 fake-ip
  store-fake-ip: true

sniffer:
  enable: false # 仅在使用redir-host时需要开启
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - "Mijia Cloud"

# Tun 配置
tun:
  enable: true
  device: utun
  stack: mixed # gvisor / mixed / system
  dns-hijack:
    - any:53 # 需要劫持的 DNS
    - tcp://any:53
    - udp://any:53
  auto-detect-interface: true # 自动识别出口网卡
  auto-redirect: false # 自动配置 iptables 以重定向 TCP 连接。仅支持 Linux。带有 auto-redirect 的 auto-route 现在可以在路由器上按预期工作，无需干预。
  auto-route: true # 配置路由表
  mtu: 9000 # 最大传输单元
  # strict-route: true # 将所有连接路由到tun来防止泄漏，但你的设备将无法其他设备被访问
  # inet4-address: # 必须手动设置ipv4地址段
  #   - 198.19.0.1/30
  # inet6-address: # 必须手动设置ipv6地址段
  #   - "fdfe:dcba:9877::1/126"
  inet4_route_address: # 启用 auto_route 时使用自定义路由而不是默认路由
    - 0.0.0.0/1
    - 128.0.0.0/1
  inet6_route_address: # 启用 auto_route 时使用自定义路由而不是默认路由
    - "::/1"
    - "8000::/1"
  # endpoint_independent_nat: false # 启用独立于端点的 NAT
  # include_uid: # UID 规则仅在 Linux 下被支持，并且需要 auto_route
  # - 0
  # include_uid_range: # 限制被路由的的用户范围
  # - 1000-99999
  # exclude_uid: # 排除路由的的用户
  #- 1000
  # exclude_uid_range: # 排除路由的的用户范围
  # - 1000-99999
  
  # Android 用户和应用规则仅在 Android 下被支持
  # 并且需要 auto_route
  
  # include_android_user: # 限制被路由的 Android 用户
  # - 0
  # - 10
  # include_package: # 限制被路由的 Android 应用包名
  # - com.android.chrome
  # exclude_package: # 排除被路由的 Android 应用包名
  #  - android.process.media

# DNS配置
dns:
  cache-algorithm: arc
  enable: true # 关闭将使用系统 DNS
  prefer-h3: true # 开启 DoH 支持 HTTP/3，将并发尝试
  # 开启 DNS 服务器监听
  listen: 0.0.0.0:53
  ipv6: true # false 将返回 AAAA 的空结果
  ipv6-timeout: 300 # 单位：ms，内部双栈并发时，向上游查询 AAAA 时，等待 AAAA 的时间，默认 100ms
  enhanced-mode: fake-ip
  # fake-ip 池设置
  fake-ip-range: 198.18.0.1/16
  # 配置不使用fake-ip的域名
  fake-ip-filter:
     - '*'
     - '*.invalid.*'
     - '*.localhost'
     - "*.lan"
     - "*.local.*"
     - '*.time.*'
     - "*.ntp.*"
     - '*.time.edu.cn'
     - '*.ntp.org.cn'
     - '*.pool.ntp.org'
     - '*.qpic.cn'
     - '*.stun.*.*'
     - '*.stun.*.*.*'
     - '*.stun.*.*.*.*'
     - '*.stun.*.*.*.*.*'
     - 'localhost.ptlogin2.qq.com'
     - '*.n.n.srv.nintendo.net'
     - 'xbox.*.*.microsoft.com'
     - '*.*.xboxlive.com'
     - '*.msftncsi.com'
     - '*.msftconnecttest.com'
     - '*.xiami.com'
     - weatherapi.market.xiaomi.com
     - WORKGROUP
    # fakeip-filter 为 rule-providers 中的名为 fakeip-filter 规则订阅，
    # 且 behavior 必须为 domain/classical，当为 classical 时仅会生效域名类规则
    # - rule-set:fakeip-filter
    # fakeip-filter 为 geosite 中名为 fakeip-filter 的分类（需要自行保证该分类存在）
    # - geosite:fakeip-filter
  # 配置fake-ip-filter的匹配模式，默认为blacklist，即如果匹配成功不返回fake-ip
  # 可设置为whitelist，即只有匹配成功才返回fake-ip
  fake-ip-filter-mode: blacklist
  use-hosts: true # 查询 hosts

  # 直连DNS
  direct-nameserver:
     - 180.76.76.76 # 百度DNS
     - 223.5.5.5 # 阿里 DNS
     - 223.6.6.6 # 阿里 DNS
     - "[2400:3200::1]" # 阿里 IPv6 DNS
     - "[2400:3200:baba::1]" # 阿里 IPv6 DNS
     - 119.29.29.29 # 腾讯DNS
     - 117.50.11.11 # ONE DNS拦截版 恶意网站拦截、广告过滤
     - 117.50.10.10 # ONE DNS纯净版 直接返回其真实的响应结果
     - 114.114.114.114 # 114 DNS
     - 114.114.115.115 # 114 DNS
     - 101.226.4.6 # 360 DNS
     - 218.30.118.6 # 360 DNS
     - 123.125.81.6 # 360 DNS
     - 140.207.198.6 # 360 DNS
     - https://doh.pub/dns-query # DNSPod DoH DNS
     - https://dns.alidns.com/dns-query # 阿里 DoH DNS
     - https://doh.360.cn/dns-query # 360 DoH DNS
     - https://dns.rubyfish.cn/dns-query # Rubyfish DoH DNS
     - system  # append DNS server from system configuration. If not found, it would print an error log and skip.

  # 配置查询需代理域名使用的 DNS 服务器
  proxy-server-nameserver:
     - 8.8.8.8 # Google DNS
     - 8.8.4.4 # Google DNS
     - "[2001:4860:4860::8888]" # Google IPv6 DNS
     - "[2001:4860:4860::8844]" # Google IPv6 DNS
     - 1.1.1.1 # Cloudflare DNS
     - 1.0.0.1 # Cloudflare DNS
     - "[2606:4700:4700::1111]" # Cloudflare IPv6 DNS
     - "[2606:4700:4700::1001]" # Cloudflare IPv6 DNS
     - 4.2.2.2 # Verizon DNS
     - 4.2.2.1 # Verizon DNS
     - 94.140.14.14 # AdGuard DNS拦截版 恶意网站拦截、广告过滤
     - 94.140.15.15 # AdGuard DNS拦截版 恶意网站拦截、广告过滤
     - 94.140.14.140 # AdGuard DNS纯净版 直接返回其真实的响应结果
     - 94.140.14.141 # AdGuard DNS纯净版 直接返回其真实的响应结果
     - "[2a10:50c0::ad1:ff]" # AdGuard IPv6 DNS拦截版 恶意网站拦截、广告过滤
     - "[2a10:50c0::ad2:ff]" # AdGuard IPv6 DNS拦截版 恶意网站拦截、广告过滤
     - "[2a10:50c0::bad1:ff]" # AdGuard IPv6 DNS纯净版 直接返回其真实的响应结果
     - "[2a10:50c0::bad2:ff]" # AdGuard IPv6 DNS纯净版 直接返回其真实的响应结果
     - https://dns.cloudflare.com/dns-query # Cloudflare DoH DNS
     - https://dns.google/dns-query # Google DoH DNS
     - https://dns.adguard-dns.com/dns-query # AdGuard DoH DNS拦截版 恶意网站拦截、广告过滤
     - https://unfiltered.adguard-dns.com/dns-query # AdGuard DoH DNS纯净版 直接返回其真实的响应结果
    
# rule-providers:
  # exploit-checker:
    # type: http
    # behavior: domain
    # url: "https://Nep-Timeline.github.io/Clash-Rule-Set/Configs/CFW-Settings.yaml"
    # path: ./CFW-Settings.yaml
    # interval: 86400
